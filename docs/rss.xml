<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Chris.Cai Blog</title><link>https://chajiuqqq.github.io/</link><description>前进前进前进！</description><copyright>Chris.Cai Blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/50012686?v=4</url><title>avatar</title><link>https://chajiuqqq.github.io/</link></image><lastBuildDate>Thu, 20 Feb 2025 09:53:35 +0000</lastBuildDate><managingEditor>Chris.Cai Blog</managingEditor><ttl>60</ttl><webMaster>Chris.Cai Blog</webMaster><item><title>k8s的Deployment和Service有什么区别</title><link>https://chajiuqqq.github.io//post/k8s-de-Deployment-he-Service-you-shen-me-qu-bie.html</link><description>&gt; From qwen2.5-max

# 用通俗的语言解释k8s的Deployment和Service 有什么区别

好的！用通俗的语言来解释 Kubernetes 的 **Deployment** 和 **Service**，可以这样理解：

---

### **1. Deployment 是“工人管理器”**
- **Deployment** 就像是一个负责管理工人的老板。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/k8s-de-Deployment-he-Service-you-shen-me-qu-bie.html</guid><pubDate>Thu, 20 Feb 2025 08:21:48 +0000</pubDate></item><item><title>我想做一些自我提升的事情，比如学钢琴、准备跳槽，但是没法形成一种执行体系，总是拖延，该如何提高执行力？</title><link>https://chajiuqqq.github.io//post/wo-xiang-zuo-yi-xie-zi-wo-ti-sheng-de-shi-qing-%EF%BC%8C-bi-ru-xue-gang-qin-%E3%80%81-zhun-bei-tiao-cao-%EF%BC%8C-dan-shi-mei-fa-xing-cheng-yi-zhong-zhi-xing-ti-xi-%EF%BC%8C-zong-shi-tuo-yan-%EF%BC%8C-gai-ru-he-ti-gao-zhi-xing-li-%EF%BC%9F.html</link><description>```
&lt;zhithink&gt;
嗯，用户现在遇到了执行力的问题，想自我提升但总是拖延，比如学钢琴和准备跳槽。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/wo-xiang-zuo-yi-xie-zi-wo-ti-sheng-de-shi-qing-%EF%BC%8C-bi-ru-xue-gang-qin-%E3%80%81-zhun-bei-tiao-cao-%EF%BC%8C-dan-shi-mei-fa-xing-cheng-yi-zhong-zhi-xing-ti-xi-%EF%BC%8C-zong-shi-tuo-yan-%EF%BC%8C-gai-ru-he-ti-gao-zhi-xing-li-%EF%BC%9F.html</guid><pubDate>Tue, 18 Feb 2025 03:08:18 +0000</pubDate></item><item><title>我们需要接纳自己的不足，但同时又要对抗人性的缺陷比如贪婪、懒惰，如何理解这句话？如何做好其中的平衡？</title><link>https://chajiuqqq.github.io//post/wo-men-xu-yao-jie-na-zi-ji-de-bu-zu-%EF%BC%8C-dan-tong-shi-you-yao-dui-kang-ren-xing-de-que-xian-bi-ru-tan-lan-%E3%80%81-lan-duo-%EF%BC%8C-ru-he-li-jie-zhe-ju-hua-%EF%BC%9F-ru-he-zuo-hao-qi-zhong-de-ping-heng-%EF%BC%9F.html</link><description>要理解'接纳不足'与'对抗缺陷'的平衡关系，需要先明确三个关键区分：

1. **不足与缺陷的界限**：先天特质（如身高）或中性特点（如内向）属于可接纳范围，而违背社会规则（如贪婪）、影响基本生存（如拖延症）则属于需要修正的缺陷。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/wo-men-xu-yao-jie-na-zi-ji-de-bu-zu-%EF%BC%8C-dan-tong-shi-you-yao-dui-kang-ren-xing-de-que-xian-bi-ru-tan-lan-%E3%80%81-lan-duo-%EF%BC%8C-ru-he-li-jie-zhe-ju-hua-%EF%BC%9F-ru-he-zuo-hao-qi-zhong-de-ping-heng-%EF%BC%9F.html</guid><pubDate>Tue, 18 Feb 2025 02:52:48 +0000</pubDate></item><item><title>linux设置代理的几种方式</title><link>https://chajiuqqq.github.io//post/linux-she-zhi-dai-li-de-ji-zhong-fang-shi.html</link><description>&gt; https://unix.stackexchange.com/a/213740
## [√]使用http_proxy环境变量
修改`~/.bashrc`或者` /etc/profile`:
```bash
http_proxy=http://user:password@proxyserver.com:3128
https_proxy=https://user:password@proxyserver.com:3128
export http_proxy
export https_proxy
```

**http_proxy和https_proxy变量有什么区别？curl命令会如何设置代理？`https_proxy=http://ip:port`这样设置允许吗？**

目标地址使用https时，会使用https_proxy设置代理，但是和代理服务器的通讯方式不一定是https
```bash
export https_proxy=http://192.168.1.1:8080
curl https://example.com
```
这里，curl 通过 HTTP 协议与代理服务器 192.168.1.1:8080 通信，然后代理服务器与 https://example.com 建立 HTTPS 连接。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/linux-she-zhi-dai-li-de-ji-zhong-fang-shi.html</guid><pubDate>Thu, 06 Feb 2025 07:24:06 +0000</pubDate></item><item><title>tailscale 如何允许访问一个节点的内网设备？</title><link>https://chajiuqqq.github.io//post/tailscale%20-ru-he-yun-xu-fang-wen-yi-ge-jie-dian-de-nei-wang-she-bei-%EF%BC%9F.html</link><description>&gt; deepseek

要允许通过 Tailscale 访问某个节点的内网设备，可以按照以下步骤进行配置：

1. **启用子网路由**：
   - 在目标节点上，运行以下命令以启用子网路由：
     ```bash
     sudo tailscale up --advertise-routes=&lt;内网子网&gt;
     ```
     例如，如果你的内网子网是 `192.168.1.0/24`，则命令如下（这里可以写多个子网，在控制台中配置启用哪个子网）：
     ```bash
     sudo tailscale up --advertise-routes=192.168.1.0/24
     ```
 


2. **在 Tailscale 管理面板中批准子网路由**：
   - 登录 Tailscale 管理面板（https://login.tailscale.com/admin/machines）。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/tailscale%20-ru-he-yun-xu-fang-wen-yi-ge-jie-dian-de-nei-wang-she-bei-%EF%BC%9F.html</guid><pubDate>Wed, 05 Feb 2025 06:10:00 +0000</pubDate></item><item><title>facad：多彩的命令行目录工具</title><link>https://chajiuqqq.github.io//post/facad%EF%BC%9A-duo-cai-de-ming-ling-xing-mu-lu-gong-ju.html</link><description>https://github.com/yellow-footed-honeyguide/facad&#13;
&#13;
**依赖：**&#13;
- python3&#13;
- meson：Meson 是一个高级构建系统，旨在提供一种易于使用的方式来定义和配置项目的构建过程。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/facad%EF%BC%9A-duo-cai-de-ming-ling-xing-mu-lu-gong-ju.html</guid><pubDate>Tue, 14 Jan 2025 03:41:59 +0000</pubDate></item><item><title>linux模拟网络延迟（包含tailscale组网时如何设置延迟）</title><link>https://chajiuqqq.github.io//post/linux-mo-ni-wang-luo-yan-chi-%EF%BC%88-bao-han-tailscale-zu-wang-shi-ru-he-she-zhi-yan-chi-%EF%BC%89.html</link><description>tc 允许你对系统的网络进行微调，包括模拟各种网络问题，例如延迟、丢包和带宽限制。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/linux-mo-ni-wang-luo-yan-chi-%EF%BC%88-bao-han-tailscale-zu-wang-shi-ru-he-she-zhi-yan-chi-%EF%BC%89.html</guid><pubDate>Tue, 17 Dec 2024 06:02:05 +0000</pubDate></item><item><title>内部仓库依赖无法下载问题</title><link>https://chajiuqqq.github.io//post/nei-bu-cang-ku-yi-lai-wu-fa-xia-zai-wen-ti.html</link><description>通常为了下载依赖，会设置GOPROXY。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/nei-bu-cang-ku-yi-lai-wu-fa-xia-zai-wen-ti.html</guid><pubDate>Sun, 08 Dec 2024 03:46:46 +0000</pubDate></item><item><title>centos firewall配置</title><link>https://chajiuqqq.github.io//post/centos%20firewall-pei-zhi.html</link><description>查看防火墙状态 `sudo systemctl status firewalld`&#13;
## firewall-cmd怎么放行端口&#13;
&#13;
使用 `firewall-cmd` 放行端口的步骤如下：&#13;
&#13;
1. **查看当前防火墙规则：**&#13;
&#13;
   首先，查看当前防火墙的开放端口：&#13;
&#13;
   ```bash&#13;
   firewall-cmd --list-all&#13;
   ```&#13;
&#13;
2. **放行端口：**&#13;
&#13;
   以放行端口 8080 为例，可以使用以下命令：&#13;
&#13;
   ```bash&#13;
   sudo firewall-cmd --zone=public --add-port=8080/tcp --permanent&#13;
   ```&#13;
&#13;
   说明：&#13;
   - `--zone=public`：表示在公共区域进行设置，可以根据实际需要选择其他区域。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/centos%20firewall-pei-zhi.html</guid><pubDate>Fri, 06 Dec 2024 10:02:50 +0000</pubDate></item><item><title>centos7的yum更新源</title><link>https://chajiuqqq.github.io//post/centos7-de-yum-geng-xin-yuan.html</link><description>官方可能不支持centos7了，太老了，所以用阿里云的源&#13;
## 下载源&#13;
1、安装wget&#13;
yum install -y wget&#13;
&#13;
2、下载CentOS 7的repo文件&#13;
`wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo`&#13;
或者&#13;
`curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo`&#13;
&#13;
3、更新镜像源&#13;
清除缓存：`yum clean all`&#13;
生成缓存：`yum update`&#13;
&#13;
&gt; https://developer.aliyun.com/article/704987 http改为https？有啥用。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/centos7-de-yum-geng-xin-yuan.html</guid><pubDate>Fri, 06 Dec 2024 09:39:00 +0000</pubDate></item><item><title>vscode快捷键妙用（windsurf）</title><link>https://chajiuqqq.github.io//post/vscode-kuai-jie-jian-miao-yong-%EF%BC%88windsurf%EF%BC%89.html</link><description># 修改方法名后，如何自动修改引用的地方&#13;
&#13;
方法一：使用 VS Code 的重命名功能&#13;
这是最直接且推荐的方法。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/vscode-kuai-jie-jian-miao-yong-%EF%BC%88windsurf%EF%BC%89.html</guid><pubDate>Thu, 05 Dec 2024 02:28:54 +0000</pubDate></item><item><title>piclmpact+alist组成摄影照片gallery❤️</title><link>https://chajiuqqq.github.io//post/piclmpact%2Balist-zu-cheng-she-ying-zhao-pian-gallery%E2%9D%A4%EF%B8%8F.html</link><description>&#13;
![image](https://github.com/user-attachments/assets/e7bfc382-8259-4b9c-8e9c-b0f973d4d74b)&#13;
&#13;
[PicImpact](https://github.com/besscroft/PicImpact)是一个摄影师专用的摄影作品展示网站，特点是瀑布流照片展示和支持 AWS S3 API、Cloudflare R2、AList API 的外部存储，不用再为难阿里云99的小鸡了🤣。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/piclmpact%2Balist-zu-cheng-she-ying-zhao-pian-gallery%E2%9D%A4%EF%B8%8F.html</guid><pubDate>Tue, 26 Nov 2024 01:51:18 +0000</pubDate></item><item><title>linux排查空间占用过大</title><link>https://chajiuqqq.github.io//post/linux-pai-cha-kong-jian-zhan-yong-guo-da.html</link><description>首先`df -h`看到/下占用基本满了，但不知道大文件在哪&#13;
&#13;
```bash&#13;
root@caijiachen:~# df -h&#13;
Filesystem                         Size  Used Avail Use% Mounted on&#13;
tmpfs                              3.2G  1.4M  3.2G   1% /run&#13;
/dev/mapper/ubuntu--vg-ubuntu--lv   96G   92G     0 100% /&#13;
tmpfs                               16G     0   16G   0% /dev/shm&#13;
tmpfs                              5.0M     0  5.0M   0% /run/lock&#13;
/dev/sda2                          2.0G  243M  1.6G  14% /boot&#13;
/dev/sda1                          1.1G  6.1M  1.1G   1% /boot/efi&#13;
tmpfs                              3.2G  4.0K  3.2G   1% /run/user/1000&#13;
overlay                             96G   92G     0 100% /var/lib/docker/overlay2/badb290f0c550b2ca8a7481aa23c332eb489e34729530984f20d501a0c7399c3/merged&#13;
```&#13;
到/下，然后用`du -h --max-depth=1`看到48G都在 ./vmagent-remotewrite-data，就知道原来是vmagent持久化的数据太大了&#13;
```bash&#13;
root@caijiachen:/# du -h --max-depth=1&#13;
4.0K    ./mnt&#13;
1.5M    ./run&#13;
1.3G    ./snap&#13;
18G     ./var&#13;
8.0K    ./srv&#13;
5.2G    ./usr&#13;
16K     ./lost+found&#13;
du: cannot access './proc/3586560/task/3586560/fd/4': No such file or directory&#13;
du: cannot access './proc/3586560/task/3586560/fdinfo/4': No such file or directory&#13;
du: cannot access './proc/3586560/fd/3': No such file or directory&#13;
du: cannot access './proc/3586560/fdinfo/3': No such file or directory&#13;
0       ./proc&#13;
0       ./dev&#13;
0       ./sys&#13;
910M    ./opt&#13;
92M     ./tmp&#13;
6.7M    ./etc&#13;
4.0K    ./work&#13;
48G     ./vmagent-remotewrite-data&#13;
249M    ./boot&#13;
4.6G    ./root&#13;
14G     ./home&#13;
143M    ./data&#13;
32K     ./test&#13;
4.0K    ./media&#13;
93G     .&#13;
```&#13;
top查看vmagent-prod一直在跑，当时为了测试用的，直接systemctl把vmagent停掉，再把./vmagent-remotewrite-data删完就可以了。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/linux-pai-cha-kong-jian-zhan-yong-guo-da.html</guid><pubDate>Mon, 25 Nov 2024 02:48:56 +0000</pubDate></item><item><title>好用的终端</title><link>https://chajiuqqq.github.io//post/hao-yong-de-zhong-duan.html</link><description>1. [alacritty](https://github.com/alacritty/alacritty)&#13;
alacritty效果优化：https://tw93.fun/2023-02-06/alacritty.html&#13;
&#13;
2. [tmux](https://github.com/tmux/tmux)&#13;
教程：https://www.ruanyifeng.com/blog/2019/10/tmux.html&#13;
&#13;
3. [fishshell](https://fishshell.com/)&#13;
[Fisher](https://github.com/jorgebucaran/fisher?tab=readme-ov-file): fish插件管理工具&#13;
&gt; fish 语法不兼容 bash，好多文档给的命令都是 bash，粘进 fish 发现不兼容就很难受，zsh 语法兼容 bash，启动速度没感觉多慢，ohmyzsh 安装也挺快的&#13;
&#13;
4. [kitty](https://sw.kovidgoyal.net/kitty/)&#13;
The fast, feature-rich, GPU based terminal emulator&#13;
&gt; kitty 有一点 印度的味道，其实做得很不错了，但是有一个点，窗口的初始启动位置居然不是居中的，而且不能配置，此外启动速度的强迫症，导致我放弃了他&#13;
&#13;
5. [ohmyz](https://ohmyz.sh/)&#13;
&#13;
6. [zsh](https://zsh.sourceforge.io/)&#13;
&#13;
zsh插件管理工具：&#13;
- [zinit](https://github.com/zdharma-continuum/zinit)&#13;
- [zi](https://github.com/z-shell/zi)&#13;
&#13;
7. [warp](https://www.warp.dev/) AI智能终端&#13;
8. [Zellij](https://github.com/zellij-org/zellij) for Linux/MacOS。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/hao-yong-de-zhong-duan.html</guid><pubDate>Mon, 25 Nov 2024 02:40:19 +0000</pubDate></item><item><title>群晖安装ipkg管理工具</title><link>https://chajiuqqq.github.io//post/qun-hui-an-zhuang-ipkg-guan-li-gong-ju.html</link><description>&gt; https://www.landiannews.com/archives/92174.html&#13;
&#13;
安装ipkg&#13;
```bash&#13;
ssh 用户名@IP地址 #按回车输入密码 密码不显示 输入后按回车即可登陆&#13;
sudo -i #再次输入密码切换root权限&#13;
wget http://ipkg.nslu2-linux.org/feeds/optware/syno-i686/cross/unstable/syno-i686-bootstrap_1.2-7_i686.xsh&#13;
chmod +x syno-i686-bootstrap_1.2-7_i686.xsh&#13;
sh syno-i686-bootstrap_1.2-7_i686.xsh&#13;
#执行上述命令后即可安装ipkg包管理器&#13;
#安装完成后执行以下命令进行测试&#13;
ipkg update #如果没有报错就说明成功安装&#13;
```&#13;
ipkg使用&#13;
```&#13;
#首先更新软件源&#13;
ipkg update&#13;
#安装命令如下&#13;
ipkg install 软件包名称&#13;
#卸载命令如下&#13;
ipkg remove 软件包名称&#13;
#例如安装wakelan&#13;
ipkg install wakelan&#13;
```。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/qun-hui-an-zhuang-ipkg-guan-li-gong-ju.html</guid><pubDate>Thu, 21 Nov 2024 06:13:47 +0000</pubDate></item><item><title>virtualbox 给根目录分区扩容</title><link>https://chajiuqqq.github.io//post/virtualbox%20-gei-gen-mu-lu-fen-qu-kuo-rong.html</link><description>由于主分区大小只有8g，pip安装依赖时提示空间不足，考虑对主分区进行扩容。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/virtualbox%20-gei-gen-mu-lu-fen-qu-kuo-rong.html</guid><pubDate>Wed, 13 Nov 2024 03:30:07 +0000</pubDate></item><item><title>[ 😋关于我 ]</title><link>https://chajiuqqq.github.io//post/%5B%20%F0%9F%98%8B-guan-yu-wo-%20%5D.html</link><description>😀可以叫我Chris Cai，写下此文时刚工作4个月，很高兴遇到每个点进来的网友。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/%5B%20%F0%9F%98%8B-guan-yu-wo-%20%5D.html</guid><pubDate>Fri, 08 Nov 2024 03:31:53 +0000</pubDate></item><item><title>我的服务</title><link>https://chajiuqqq.github.io//post/wo-de-fu-wu.html</link><description>- [certs.chajiuqqq.cn](https://certs.chajiuqqq.cn/) // 证书管理&#13;
- [files.chajiuqqq.cn](https://files.chajiuqqq.cn/files/) // 文件管理&#13;
- [blogs.chajiuqqq.cn](https://blogs.chajiuqqq.cn/) // blog&#13;
- [photo.chajiuqqq.cn](https://photo.chajiuqqq.cn/) // 摄影照片展示&#13;
- [sys.chajiuqqq.cn](https://sys.chajiuqqq.cn/) // 系统监控&#13;
- [alist](https://alist.chajiuqqq.cn/) //alist。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/wo-de-fu-wu.html</guid><pubDate>Fri, 08 Nov 2024 02:34:56 +0000</pubDate></item><item><title>Caddy妙用</title><link>https://chajiuqqq.github.io//post/Caddy-miao-yong.html</link><description># systemd管理Caddy&#13;
&gt; 写一个service用于管理caddy&#13;
1. `sudo nano /etc/systemd/system/caddy.service`&#13;
```&#13;
[Unit]&#13;
Description=Caddy Web Server&#13;
Documentation=https://caddyserver.com/docs/&#13;
After=network.target&#13;
&#13;
[Service]&#13;
User=root&#13;
Group=root&#13;
ExecStart=/usr/bin/caddy run --config /etc/caddy/Caddyfile --adapter caddyfile&#13;
ExecReload=/usr/bin/caddy reload --config /etc/caddy/Caddyfile --adapter caddyfile&#13;
TimeoutStopSec=5s&#13;
LimitNOFILE=1048576&#13;
LimitNPROC=512&#13;
PrivateTmp=true&#13;
ProtectSystem=full&#13;
AmbientCapabilities=CAP_NET_BIND_SERVICE&#13;
CapabilityBoundingSet=CAP_NET_BIND_SERVICE&#13;
&#13;
[Install]&#13;
WantedBy=multi-user.target&#13;
&#13;
```&#13;
2. 启用并启动 Caddy 服务&#13;
接下来，使用以下命令启用并启动 Caddy 服务：&#13;
```bash&#13;
# 重新加载 systemd 配置&#13;
sudo systemctl daemon-reload&#13;
&#13;
# 启动 Caddy 服务&#13;
sudo systemctl start caddy&#13;
&#13;
# 设置开机自启动&#13;
sudo systemctl enable caddy&#13;
&#13;
# 查看日志&#13;
journalctl -u caddy -f&#13;
```&#13;
&#13;
&gt; 解释下systemctl enable caddy命令做了什么，怎么实现自启动的&#13;
&#13;
`systemctl enable caddy` 命令的作用是将 Caddy 服务设置为**开机自启动**。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/Caddy-miao-yong.html</guid><pubDate>Fri, 08 Nov 2024 02:16:10 +0000</pubDate></item><item><title>tailscale derper证书自动更新</title><link>https://chajiuqqq.github.io//post/tailscale%20derper-zheng-shu-zi-dong-geng-xin.html</link><description>derper的acme证书有效期60天，每次过期了要手动更新，很麻烦。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/tailscale%20derper-zheng-shu-zi-dong-geng-xin.html</guid><pubDate>Wed, 06 Nov 2024 09:55:01 +0000</pubDate></item><item><title>[TODO]MySQL longtext 和varchar的区别</title><link>https://chajiuqqq.github.io//post/%5BTODO%5DMySQL%20longtext%20-he-varchar-de-qu-bie.html</link><description>&gt; https://stackoverflow.com/a/1827099&#13;
&#13;
text不能作为reference列，varchar可以。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/%5BTODO%5DMySQL%20longtext%20-he-varchar-de-qu-bie.html</guid><pubDate>Thu, 24 Oct 2024 01:54:55 +0000</pubDate></item><item><title>git不切换分支更新其他分支的方法</title><link>https://chajiuqqq.github.io//post/git-bu-qie-huan-fen-zhi-geng-xin-qi-ta-fen-zhi-de-fang-fa.html</link><description>我在EH-1234开发，此时origin/main有更新， 如何merge main到EH-1234而不用切换到main（因为本地有很多未提交的代码）？&#13;
```&#13;
git pull origin main&#13;
```。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/git-bu-qie-huan-fen-zhi-geng-xin-qi-ta-fen-zhi-de-fang-fa.html</guid><pubDate>Fri, 18 Oct 2024 07:18:34 +0000</pubDate></item><item><title>[TODO]如何设置你的服务器</title><link>https://chajiuqqq.github.io//post/%5BTODO%5D-ru-he-she-zhi-ni-de-fu-wu-qi.html</link><description>&gt; https://becomesovran.com/blog/server-setup-basics.html&#13;
&#13;
# SSH&#13;
1. 创建新用户&#13;
```&#13;
sudo adduser newuser&#13;
sudo usermod -aG sudo newuser&#13;
```&#13;
&gt; `sudo adduser newuser`&#13;
作用：&#13;
这个命令用于在系统中创建一个名为 newuser 的新用户账户。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/%5BTODO%5D-ru-he-she-zhi-ni-de-fu-wu-qi.html</guid><pubDate>Fri, 11 Oct 2024 02:50:37 +0000</pubDate></item><item><title>GNU Readline库的妙用</title><link>https://chajiuqqq.github.io//post/GNU%20Readline-ku-de-miao-yong.html</link><description>敲命令时，自动补全等功能都是GNU Readline库的妙用，还有其他小技巧：&#13;
Ctrl-A：回到行首 &#13;
Ctrl-E：回到行尾&#13;
Ctrl-U：清除光标前的命令&#13;
&#13;
https://twobithistory.org/2019/08/22/readline.html。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/GNU%20Readline-ku-de-miao-yong.html</guid><pubDate>Thu, 10 Oct 2024 07:54:09 +0000</pubDate></item><item><title>Git妙用</title><link>https://chajiuqqq.github.io//post/Git-miao-yong.html</link><description># 用例
- **查看commit提交的细节，会展示文件变化细节**：`git show &lt;commit&gt;` OR `git log -p`
- **查看commit中提交的文件名称**：`git show --name-status &lt;commit&gt;`
```
$  git show --name-status 1e7cf253a6e6e
commit 1e7cf253a6e6ecee6376b12d9fcabf2ec3f7f9e6 (EH-1699)
Author: caijiachen &lt;chajiuqqq@gmail.com&gt;
Date:   Sat Sep 7 15:57:21 2024 +0200

    EH-1699: add other stock business interface to proto

M       oms/pkg/proto/oms_order_v3.pb.go
M       oms/pkg/proto/oms_order_v3.proto
M       rfcctl/types/mm.go
M       webproto
```
- **git如何强制使用远程dev分支覆盖本地dev分支**: 
```
git fetch origin  
git reset --hard origin/dev
```

- git merge出现冲突时，不想处理冲突，取消合并：`git merge --abort`
- 如果已经merge了，要回退，用`git reset `或 `git revert`
- **误add了不想commit的文件到暂存区，怎么删除？** `git restore --staged &lt;文件&gt; `：将暂存区中的文件替换为仓库中某个提交的版本（默认为 HEAD）。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/Git-miao-yong.html</guid><pubDate>Sat, 07 Sep 2024 14:27:01 +0000</pubDate></item><item><title>mysql的json处理方法合集</title><link>https://chajiuqqq.github.io//post/mysql-de-json-chu-li-fang-fa-he-ji.html</link><description>## 更新json中的某个属性&#13;
&#13;
写一个mysql的sql，property列存储了json，格式是&#13;
```json&#13;
{'common': {'code': 'HU001'}, 'factory_code': '2010', 'factory_name': '匈牙利恩捷', 'work_shop_type': 1}&#13;
```&#13;
要求把factory_name从'匈牙利恩捷'更新为'SEMCORP Hungary Kft'&#13;
&#13;
SQL:&#13;
```sql&#13;
UPDATE category_0&#13;
SET property = JSON_SET(property, '$.factory_name', 'SEMCORP Hungary Kft')&#13;
WHERE JSON_UNQUOTE(JSON_EXTRACT(property, '$.factory_name')) = '匈牙利恩捷';&#13;
```&#13;
解释：&#13;
- JSON_EXTRACT(property, '$.factory_name')：从JSON对象中提取factory_name的值。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/mysql-de-json-chu-li-fang-fa-he-ji.html</guid><pubDate>Tue, 27 Aug 2024 12:04:07 +0000</pubDate></item><item><title>mysqldump导出数据和数据库</title><link>https://chajiuqqq.github.io//post/mysqldump-dao-chu-shu-ju-he-shu-ju-ku.html</link><description>&gt; https://www.cnblogs.com/chenmh/p/5300370.html&#13;
&#13;
1. 导出所有数据库&#13;
```&#13;
mysqldump -uroot -proot --all-databases &gt;/tmp/all.sql&#13;
```&#13;
&#13;
2. 导出指定数据库&#13;
```&#13;
mysqldump -uroot -proot --databases db1 db2 &gt;/tmp/user.sql&#13;
```&#13;
&#13;
3. 只导出表结构，不包含数据&#13;
```&#13;
mysqldump -uroot -proot --no-data --databases db1 &gt;/tmp/db1.sql&#13;
```&#13;
&#13;
4. 导出指定表&#13;
```&#13;
mysqldump -uroot -proot --databases db1 --tables a1 a2  &gt;/tmp/db1.sql&#13;
```&#13;
。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/mysqldump-dao-chu-shu-ju-he-shu-ju-ku.html</guid><pubDate>Mon, 26 Aug 2024 12:06:18 +0000</pubDate></item><item><title>重置mysql/mariadb的root密码</title><link>https://chajiuqqq.github.io//post/zhong-zhi-mysql-mariadb-de-root-mi-ma.html</link><description>https://www.digitalocean.com/community/tutorials/how-to-reset-your-mysql-or-mariadb-root-password。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/zhong-zhi-mysql-mariadb-de-root-mi-ma.html</guid><pubDate>Mon, 22 Jul 2024 06:26:05 +0000</pubDate></item><item><title>优雅截断utf8字符串</title><link>https://chajiuqqq.github.io//post/you-ya-jie-duan-utf8-zi-fu-chuan.html</link><description>&#13;
## 背景&#13;
SAP接口某CHAR字段要求长度不超过25字节，该字段可能输入中文，如何优雅截断字符串？&#13;
- 如果转为byte截取，会导致结尾乱码可能&#13;
- 无法按照字符个数截取，因为可能中英文数字混合输入&#13;
&#13;
## 解决方法&#13;
利用for range字符串时，每次获取一个rune（中英文或者数字），此时index是byte的index。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/you-ya-jie-duan-utf8-zi-fu-chuan.html</guid><pubDate>Mon, 22 Jul 2024 03:47:36 +0000</pubDate></item><item><title>docker可用的国内镜像源以及代理设置</title><link>https://chajiuqqq.github.io//post/docker-ke-yong-de-guo-nei-jing-xiang-yuan-yi-ji-dai-li-she-zhi.html</link><description>&gt; https://neucrack.com/p/286&#13;
# 源&#13;
这几个可用，参考https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6&#13;
```&#13;
sudo mkdir -p /etc/docker&#13;
sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'&#13;
{&#13;
    'registry-mirrors': [&#13;
        'https://docker.m.daocloud.io',&#13;
        'https://dockerproxy.com',&#13;
        'https://mirror.baidubce.com',&#13;
        'https://docker.nju.edu.cn',&#13;
        'https://mirror.iscas.ac.cn'&#13;
    ]&#13;
}&#13;
EOF&#13;
sudo systemctl daemon-reload&#13;
sudo systemctl restart docker&#13;
```&#13;
# 代理设置&#13;
docker pull 拉取镜像时设置代理&#13;
docker 的代理设置是一件比较麻烦的事情，很容易出问题，但是弄懂了也还是比较清楚。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/docker-ke-yong-de-guo-nei-jing-xiang-yuan-yi-ji-dai-li-she-zhi.html</guid><pubDate>Fri, 19 Jul 2024 06:59:54 +0000</pubDate></item><item><title>awk批量删除docker none的image</title><link>https://chajiuqqq.github.io//post/awk-pi-liang-shan-chu-docker%20none-de-image.html</link><description>1. 查看none镜像：&#13;
```&#13;
# docker image ls | grep none&#13;
&lt;none&gt;                        &lt;none&gt;    01a4d5898ad0   39 minutes ago      867MB&#13;
&lt;none&gt;                        &lt;none&gt;    950d8ca6051f   About an hour ago   973MB&#13;
&lt;none&gt;                        &lt;none&gt;    cce3f6491395   2 hours ago         940MB&#13;
&lt;none&gt;                        &lt;none&gt;    2e10b33cb6dd   3 hours ago         932MB&#13;
&lt;none&gt;                        &lt;none&gt;    d616e7abf40c   3 hours ago         932MB&#13;
&lt;none&gt;                        &lt;none&gt;    3565400a4b6e   4 hours ago         932MB&#13;
&lt;none&gt;                        &lt;none&gt;    1a5f77c032b9   4 hours ago         932MB&#13;
&lt;none&gt;                        &lt;none&gt;    a65b4e782623   4 hours ago         932MB&#13;
&lt;none&gt;                        &lt;none&gt;    7c6de7d06887   5 hours ago         932MB&#13;
&lt;none&gt;                        &lt;none&gt;    f2f5d096e2ed   5 hours ago         932MB&#13;
&lt;none&gt;                        &lt;none&gt;    8f93202d9599   20 hours ago        932MB&#13;
&lt;none&gt;                        &lt;none&gt;    6b802f894a86   21 hours ago        932MB&#13;
```&#13;
&#13;
2. 过滤出imageID&#13;
&#13;
- awk 命令会默认以空格作为字段分隔符，并将每行视为一个记录。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/awk-pi-liang-shan-chu-docker%20none-de-image.html</guid><pubDate>Thu, 18 Jul 2024 06:20:09 +0000</pubDate></item><item><title>docker怎么在构建镜像时debug</title><link>https://chajiuqqq.github.io//post/docker-zen-me-zai-gou-jian-jing-xiang-shi-debug.html</link><description>https://devopscube.com/keep-docker-container-running/&#13;
&#13;
## 背景&#13;
&#13;
需要构建编译环境的镜像，但是直接docker build会出现很多错误，不好debug。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/docker-zen-me-zai-gou-jian-jing-xiang-shi-debug.html</guid><pubDate>Thu, 18 Jul 2024 01:58:08 +0000</pubDate></item><item><title>SAP同步事件到业务系统性能优化</title><link>https://chajiuqqq.github.io//post/SAP-tong-bu-shi-jian-dao-ye-wu-xi-tong-xing-neng-you-hua.html</link><description>## 背景&#13;
EAP平台由多个子系统组成，比如MWMS、WMS、MES、OMS、EAP。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/SAP-tong-bu-shi-jian-dao-ye-wu-xi-tong-xing-neng-you-hua.html</guid><pubDate>Tue, 16 Jul 2024 02:55:49 +0000</pubDate></item><item><title>go struct转proto message 的prompt</title><link>https://chajiuqqq.github.io//post/go%20struct-zhuan-proto%20message%20-de-prompt.html</link><description># prompt&#13;
&#13;
帮我把go的struct定义转为proto message定义&#13;
1. 其中message的变量名称用小写+下划线格式命名&#13;
2. go中类似Enum[oms.FeedingType] 的类型转为proto的oms.FeedingType类型&#13;
3. 请把tag中的comment作为注释加到每行定义之后，并忽略其他tag。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/go%20struct-zhuan-proto%20message%20-de-prompt.html</guid><pubDate>Fri, 21 Jun 2024 06:28:28 +0000</pubDate></item><item><title>[TODO] Go微服务开发调研 ｜ A survey in Go microservices development</title><link>https://chajiuqqq.github.io//post/%5BTODO%5D%20Go-wei-fu-wu-kai-fa-diao-yan-%20%EF%BD%9C%20A%20survey%20in%20Go%20microservices%20development.html</link><description>大纲&#13;
&#13;
- 什么是微服务架构？&#13;
- 微服务开发和传统单体应用有什么区别？&#13;
- 什么是服务治理？&#13;
- 常用微服务开发框架有哪些？&#13;
- 微服务开发流程？。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/%5BTODO%5D%20Go-wei-fu-wu-kai-fa-diao-yan-%20%EF%BD%9C%20A%20survey%20in%20Go%20microservices%20development.html</guid><pubDate>Tue, 30 Apr 2024 09:58:18 +0000</pubDate></item><item><title>Go中数字类型如何获取二进制表示｜Converting from an integer to its binary representation</title><link>https://chajiuqqq.github.io//post/Go-zhong-shu-zi-lei-xing-ru-he-huo-qu-er-jin-zhi-biao-shi-%EF%BD%9CConverting%20from%20an%20integer%20to%20its%20binary%20representation.html</link><description>2种方法：&#13;
&#13;
```go&#13;
num := int64(127)&#13;
&#13;
// 1&#13;
res := strconv.FormatInt(num, 2)&#13;
fmt.Println(res)&#13;
&#13;
// 2&#13;
res = fmt.Sprintf('%b', num)&#13;
fmt.Println(res)&#13;
&#13;
// 3&#13;
res = fmt.Sprintf('%08b', num)&#13;
fmt.Println(res)&#13;
&#13;
```&#13;
&#13;
```&#13;
1111111&#13;
1111111&#13;
01111111&#13;
```&#13;
&#13;
From: https://stackoverflow.com/questions/13870845/converting-from-an-integer-to-its-binary-representation。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/Go-zhong-shu-zi-lei-xing-ru-he-huo-qu-er-jin-zhi-biao-shi-%EF%BD%9CConverting%20from%20an%20integer%20to%20its%20binary%20representation.html</guid><pubDate>Thu, 25 Apr 2024 08:20:35 +0000</pubDate></item><item><title>TED：多久才能学会一个技能？| how to learn anything</title><link>https://chajiuqqq.github.io//post/TED%EF%BC%9A-duo-jiu-cai-neng-xue-hui-yi-ge-ji-neng-%EF%BC%9F-%20how%20to%20learn%20anything.html</link><description>&gt; [The first 20 hours -- how to learn anything | Josh Kaufman | TEDxCSU](https://www.youtube.com/watch?v=5MgBikgcWnY) &#13;
&#13;
[ZH]&#13;
&#13;
**First：分解你要学的技能**&#13;
&#13;
将技能分解为一个个小技能，优先练习关键的技能&#13;
&#13;
**Second：要有一定的理论知识的学习，帮助你自我纠错**&#13;
&#13;
学习能够支撑你开始练习的知识就可以了，不要拖延&#13;
&#13;
**Third：排除干扰**&#13;
&#13;
排除电视、网络、手机等阻止你坐下来开始练习的干扰&#13;
&#13;
**Fourth：至少练习20h**&#13;
&#13;
在你开始想做什么前，先给自己20h的练习时间，帮你度过那段最容易受挫的时期&#13;
&#13;
---&#13;
&#13;
[EN]&#13;
&#13;
**First: deconstruct skills you want to learn**&#13;
Break down skills into small ones and practice key skills first&#13;
&#13;
**Second: Learn enough to self-correct**&#13;
Just learn enough knowledge to support your practice. Don't delay.&#13;
&#13;
**Third: Remove practice distractions**&#13;
Eliminate distractions such as television, the internet, and your cell phone that prevent you from sitting down and practicing.&#13;
&#13;
**Fourth: Practice at least 20 hours**&#13;
Before you start thinking about doing something, give yourself 20 hours of practice time to help you get through the most frustrating period.&#13;
。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/TED%EF%BC%9A-duo-jiu-cai-neng-xue-hui-yi-ge-ji-neng-%EF%BC%9F-%20how%20to%20learn%20anything.html</guid><pubDate>Thu, 25 Apr 2024 03:28:21 +0000</pubDate></item><item><title>解密SSL证书</title><link>https://chajiuqqq.github.io//post/jie-mi-SSL-zheng-shu.html</link><description>&gt; 原文：https://jvns.ca/blog/2017/01/31/whats-tls/&#13;
&#13;
# TLS：SSL的最新版本&#13;
&#13;
我曾困惑于TLS是什么，基本上SSL的最新版本被称为TLS（SSL 3.0之后的版本就是TLS1.0），为了避免混淆，我还是称其为SSL。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/jie-mi-SSL-zheng-shu.html</guid><pubDate>Tue, 26 Mar 2024 07:44:52 +0000</pubDate></item><item><title>非443端口部署derper</title><link>https://chajiuqqq.github.io//post/fei-443-duan-kou-bu-shu-derper.html</link><description>非443端口没法使用let's encrypt申请证书，需要自己准备证书，以下使用digiCert的证书并介绍配置步骤。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/fei-443-duan-kou-bu-shu-derper.html</guid><pubDate>Tue, 23 Jan 2024 07:00:06 +0000</pubDate></item><item><title>go中GOPROXY的配置如何修改？这种修改是全局的吗？原理是修改了什么？</title><link>https://chajiuqqq.github.io//post/go-zhong-GOPROXY-de-pei-zhi-ru-he-xiu-gai-%EF%BC%9F-zhe-zhong-xiu-gai-shi-quan-ju-de-ma-%EF%BC%9F-yuan-li-shi-xiu-gai-le-shen-me-%EF%BC%9F.html</link><description>&gt; Summary：GO的配置都是读取环境变量，比如GOPROXY有默认值，修改就是修改环境变量，要么直接export修改当前shell的环境变量，或者把export加到profile里，每次登录都会执行，比较方便。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/go-zhong-GOPROXY-de-pei-zhi-ru-he-xiu-gai-%EF%BC%9F-zhe-zhong-xiu-gai-shi-quan-ju-de-ma-%EF%BC%9F-yuan-li-shi-xiu-gai-le-shen-me-%EF%BC%9F.html</guid><pubDate>Wed, 08 Nov 2023 02:44:35 +0000</pubDate></item><item><title>Test Blog</title><link>https://chajiuqqq.github.io//post/Test%20Blog.html</link><description># Topic&#13;
&#13;
**Hello，This is my cat!**&#13;
&#13;
![tk](https://github.com/chajiuqqq/chajiuqqq.github.io/assets/50012686/c2406b48-9eca-4c3f-a282-6c037db3360a)&#13;
。</description><guid isPermaLink="true">https://chajiuqqq.github.io//post/Test%20Blog.html</guid><pubDate>Thu, 19 Oct 2023 10:03:51 +0000</pubDate></item></channel></rss>